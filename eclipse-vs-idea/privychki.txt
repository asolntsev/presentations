Как IDE формирует привычки программиста

IDEA bonuses:
- в Eclipse менее удобны, например, подсветка ошибок работает не на лету, а только после сохранения файла.
- рефакторинг не компилирующегося кода тоже крутая вещь


TODO Что такое CMD+SHIFT+A (IDEA) и Ctrl+3 (Eclipse)?

1. Eclipse: TODO, FIXME, XXX - и ещё свои можно добавлять (Способствует засорению кода)
    IDEA - только TODO (приучает к Clean Code).

2. IDEA - комментарии выглядят некрасиво и сдвигаются. Сначала бесило, потом понял, что это отучает использовать комментарии в коде.
2.a. Насколько легко закомментировать строку или целый метод? Похоже, что строку одинаково легко (Ctrl+/), а вот метод в Eclipse придётся выделить: http://javarevisited.blogspot.com/2012/12/eclipse-shortcut-to-comment-uncomment.html

3. Конечно, надо описать про AutoSave по Ctrl+S vs. AutoSave по Run Tests.
While Eclipse has "compile-on-save" feature, IDEA has "save-on-compile" feature. Not a big difference. In both IDEs user needs one shortcut to save+compile the code (Ctrl+S or Ctrl+F9).

3.a. Local history - насколько удобно использовать? TODO Найти это в Eclipse

+ Привычка нажимать Ctrl+Enter, чтобы закрыть любое окно (В Eclipse такого нет)

4. IDEA - Ctrl+Shift+T - создание юнит-теста. В Eclipse такого просто нет.
    IDEA - Ctrl+Shift+F10 - запуск юнит-теста. В Eclipse  это сложнее: http://www.dzone.com/links/r/working_efficiently_with_junit_in_eclipse.html.

    4.1 Похоже, обе IDE запускают только один тест, если курсор находится внутри него.
    4.2 В Eclipse есть удобная кнопка F11 (Ctrl+F11), чтобы запустить последний свалившийся тест. TODO найти аналог в IDEA.

4.a. В Eclipse одной кнопкой можно сгенерировать javadoc для всех методов. В IDEA такого просто нет.

5. IDEA: по умолчанию пробелы.
Eclipse: по умолчанию табы.

6. Шорткаты в идее ориентированы на рефакторинг, в Eclipse - TODO...

7. Ctrl+K в идее - это гениально. Способствует маленьким коммитам и ревью кода.
    TODO найти аналог в Eclipse.

8. Замена с помощью TAB. TODO Найти аналог в Eclipse.

9. Пример Антона про то, как IDEA понимает ANT скрипт, все переменные в нём и подсказыват пути к файлам.

10. For BreakPoint: TODO in IDEA vs "Ctrl+Shift+B" in Eclipse

11. TODO Как сделать переход от от интерфейса к реализации и наоборот?

12. Как делать простейшие движения. Начать с создания переменной: new ArrayList() и Ctrl+V.

13. Привычки в IDEA: Ctrl+T (update), Crl+K (commit)

P.S. Претензия к IDEA насчёт шорткатов (такая же, как и у меня была в своё время):
В IDEA не сразу нашёл, как сделать переформатирование кода в редакторе. В Eclipse это в контектном меню: «Source» → «Format». Из контекстного меню Eclipse в редакторе кода можно сразу же попасть в настройки редактора, а в IDEA для этого нужно открыть отдельное окно настроек «Settings...» из главного меню «File». Так говорите, что IDEA «действительно понимает контекст»? ;)

Andrei Solntsev